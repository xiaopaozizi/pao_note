焦点事件
	焦点 : 使浏览器能够区分用户输入的对象，当一个元素有焦点的时候，那么他就可以接收用户的输入。
	我们可以通过一些方式给元素设置焦点
		1.点击
		2.tab
		3.js
		
		不是所有元素都能够接收焦点的.能够响应用户操作的元素
	
	onfocus : 当元素获取到焦点的时候
	onblur : 当元素失去焦点的时候触发
	
	obj.focus() 给指定的元素设置焦点
	obj.blur() 取消指定元素的焦点
	obj.select() 选择指定元素里面的文本内容
	
	
Event对象
	event : 事件对象 , 当一个事件发生的时候，
			和当前这个对象发生的这个事件有关的一些详细的信息
			都会被临时保存到一个指定地方-event对象，供我们在需要的调用。飞机-黑匣子

	事件对象必须在一个事件调用的函数里面使用才有内容
	事件函数：事件调用的函数，一个函数是不是事件函数，不在定义的决定，而是取决于这个调用的时候

	兼容
	ie/chrome : event是一个内置全局对象
	标准下 : 事件对象是通过事件函数的第一个参数传入
	var e = ev || event;	√
	
	如果一个函数是被事件调用的那么，这个函数定义的第一个参数就是事件对象

	clientX[Y] : 当一个事件发生的时候，鼠标到页面可视区的距离	√
	e.clientX;
	
事件冒泡

	事件冒泡 : 当一个元素接收到事件的时候，会把他接收到的所有传播给他的父级，
				一直到顶层window.事件冒泡机制
	
	阻止冒泡 : 当前要阻止冒泡的事件函数中调用 	√
				ev.cancleBubble = true;
				ev.stopPropagation();
	
事件绑定的第二种形式	√
	ie：obj.attachEvent(事件名称，事件函数);
		1.没有捕获
		2.事件名称有on
		3.事件函数执行的顺序：标准ie-》正序   非标准ie-》倒序
		4.this指向window
	标准：obj.addEventListener(事件名称，事件函数，是否捕获);
		1.有捕获
		2.事件名称没有on
		3.事件执行的顺序是正序
		4.this触发该事件的对象

	function bind(obj, evname, fn) {
		if (obj.addEventListener) {
			obj.addEventListener(evname, fn, false);
		} else {
			obj.attachEvent('on' + evname, function() {
				fn.call(obj);
			});
		}
	}
	
	事件函数的取消
		ie : obj.detachEvent(事件名称，事件函数);
		标准 : obj.removeEventListener(事件名称，事件函数，是否捕获);
		PS：ie下没有事件捕获

call方法，改变函数的上下文--this	√
	call方法第一个参数可以改变函数执行过程中的内部this的指向，
	call方法第二个参数开始就是原来函数的参数列表
	
事件捕获	√
	addEventListener的第三个参数支持事件捕获
	false为冒泡，告诉触发事件的对象，如果有一个出去的事件触发了你，你就执行它
	true为捕获，告诉触发事件的对象，如果有一个进去的事件触发了你，你就执行它
	IE下用全局捕获
	
键盘事件	√
	onkeydown : 当键盘按键按下的时候触发
	onkeyup : 当键盘按键抬起的时候触发

	event.keyCode : 数字类型 键盘按键的值 键值
		ctrlKey,shiftKey,altKey 布尔值
		当一个事件发生的时候，如果ctrl || shift || alt 是按下的状态，返回true，否则返回fals
	案例：14留言本 同时按下ctrl+enter键提交数据
	案例：15键盘控制物体上下左右运动
	
阻止默认行为	√
	事件默认行为：当一个事件发生的时候浏览器自己会默认做的事情
	怎么阻止？
	当前这个行为是什么事件触发的，然后在这个事件的处理函数中使用return false;
	案例：17自定义右键菜单
	